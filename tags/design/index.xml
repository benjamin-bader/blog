<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design on bendb</title><link>https://www.bendb.com/tags/design/</link><description>Recent content in design on bendb</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2020. All rights reserved.</copyright><lastBuildDate>Wed, 06 Apr 2016 21:42:04 -0700</lastBuildDate><atom:link href="https://www.bendb.com/tags/design/index.xml" rel="self" type="application/rss+xml"/><item><title>happy code</title><link>https://www.bendb.com/blog/happy-code/</link><pubDate>Wed, 06 Apr 2016 21:42:04 -0700</pubDate><guid>https://www.bendb.com/blog/happy-code/</guid><description>My favorite parts of being a programmer are those moments when, after ruminating on a bit of not-quite-clean code, elegant solutions just present themselves to you. Today&amp;rsquo;s installment is from Thrifty, the Thrift implementation for Android I wrote at Microsoft.
Briefly, part of Thrifty&amp;rsquo;s job is to generate Java classes corresponding to structs defined in Thrift IDL. Part of that is generating descriptive .toString() methods. For the first release, Thrifty generated code like this:</description></item></channel></rss>